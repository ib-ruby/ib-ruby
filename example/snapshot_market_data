#!/usr/bin/env ruby
#
# This script connects to IB API and collects snaphot Data for given Contracts
#

require_relative 'config_ib'

class Snapshot
	def initialize
		@contracts = Array.new
		@prices = Hash.new
	end


	def add_contract  *contract
		contract.each do |c|
			@contracts << c
		end
	end

	def print_results
	#	@prices.each do |x,y|
	#		STDOUT.print "	#{@contracts[x][:display_text] } \t" +
	#			y.collect{|x,y| "#{x}: #{y}"}.join(" \n\t\t\t ") +" \n"
	#	enda
		 @prices.each do |a,b|
			  contract = b.delete :contract
				if contract.present?
					puts  contract.to_human
					print b.inspect  # [:bid_price], b[:ask_price], b[:high], b[:low], b[:close_price]
					print"\n"
				end
		 end
	end


	def process
		ib =  IB::Connection.current

		count =  @contracts.size
		ib.subscribe(:Alert) do |msg|
			if msg.code == 354										# Requested market data is not subscribed
				count -=1														# wir zählen den Counter runter, so dass
				puts "No Marketdata Subscription"		# am Ende die Orderantwort ausgelöst wird
			else
				puts msg.message										# unhandled Alert
			end
		end
		#  we collect price-events in @prices-Hash
		ib.subscribe( :TickPrice){ |msg| @prices[msg.ticker_id][msg.type]=msg.price }
		# When finished, print the results
		ib.subscribe( :TickSnapshotEnd){ count -=1; print_results if count.zero? }
		# fire the request
		ib.send_message :RequestMarketDataType, market_data_type: :delayed

		@contracts.each do |contract|
			request_id = ib.send_message :RequestMarketData, contract: contract, snapshot: 1
			# connect contracts to prices
			@prices[request_id] = {contract: contract}
		end
	end

end # class

####  here it starts #######

require 'bundler/setup'
require 'ib-ruby'

# # Connect to IB TWS
IB::Connection.new client_id: 1134, host: $host, port: $port do |gw|
	# Set log level
	gw.logger.level = Logger::FATAL
end

s = Snapshot.new
s.add_contract  IB::Stock.new symbol: 'FAST', con_id: 269120, exchange: 'SMART'
s.add_contract  IB::Stock.new symbol: 'IBM'
s.add_contract  IB::Symbols::Forex.eurusd
s.process

Thread.new do
	sleep 3
	puts "\n******** Press <Enter> to quit *********\n\n"
end
STDIN.gets
puts "done."


=begin
Expected Output

Market data farm is connecting:usfarm
Market data farm connection is OK:cashfarm
Market data farm is connecting:usfarm
Market data farm connection is OK:usfarm
Requested market data is not subscribed. Displaying delayed market data...
Requested market data is not subscribed. Displaying delayed market data...
<Stock: FAST USD>
{:delayed_bid=>0.578e2, :delayed_ask=>0.5784e2, :delayed_last=>0.5781e2, :delayed_high=>0.584e2, :delayed_low=>0.573e2, :delayed_close=>0.5737e2, :delayed_open=>0.0}
<Stock: IBM USD>
{:delayed_bid=>0.16083e3, :delayed_ask=>0.16085e3, :delayed_last=>0.16085e3, :delayed_high=>0.16125e3, :delayed_low=>0.15852e3, :delayed_close=>0.15812e3, :delayed_open=>0.0}
<Contract: EUR forex IDEALPRO USD>
{:high=>0.123835e1, :low=>0.12316e1, :close_price=>0.12368e1, :bid_price=>0.123218e1, :ask_price=>0.123219e1}

=end
