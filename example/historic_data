#!/usr/bin/env ruby
#
# This script downloads historic data for specific symbols from IB

require 'rubygems'
require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'ib-ruby'

# Definition of what we want data for.  We have to keep track of what ticker id
# corresponds to what symbol ourselves, because the ticks don't include any other
# identifying information. The choice of ticker ids is, as far as I can tell, arbitrary.
@contracts = {123 => IB::Symbols::Stocks[:vxx],
              456 => IB::Symbols::Futures[:vix],
              789 => IB::Symbols::Forex[:eurusd] # No historical data for GBP/CASH@IDEALPRO
}

# Connect to IB TWS.
ib = IB::Connection.new :client_id => 1112, :port => 7496 # TWS

# Subscribe to HistoricalData incoming events.  The code passed in the block
# will be executed when a message of that type is received, with the received
# message as its argument. In this case, we just print out the data.
#
# Note that we have to look the ticker id of each incoming message
# up in local memory to figure out what it's for.
#
# We also keep track of which contracts we've received messages for, and (below)
# assume execution is complete once all contracts have received data.
responded = []
ib.subscribe([IB::Messages::Incoming::HistoricalData, :Alert]) do |msg|
  if @contracts.has_key?(msg.request_id)
    if msg.is_a?(IB::Messages::Incoming::HistoricalData)
      puts @contracts[msg.request_id].description + ": #{msg.count} items:"
      puts msg.to_human
      msg.results.each { |entry| puts "  #{entry}" }
    else
      puts msg.to_human + " #{msg.request_id}"
    end
    responded << msg.request_id
  end
end

# Now we actually request historical data for the symbols we're interested in. TWS will
# respond with a HistoricalData message, which will be processed by the code above.
@contracts.each_pair do |request_id, contract|
  ib.send_message IB::Messages::Outgoing::RequestHistoricalData.new(
                      :request_id => request_id,
                      :contract => contract,
                      :end_date_time => Time.now.to_ib,
                      :duration => '30 D', #    ?
                      :bar_size => '1 hour', #  IB::BAR_SIZES.key(:hour)?
                      :what_to_show => :trades,
                      :use_rth => 1,
                      :format_date => 1)
end

# Assume execution is complete once we've received a message of some type for each contract.
sleep(0.2) while responded.length < @contracts.length
ib.disconnect
