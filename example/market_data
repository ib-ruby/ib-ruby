#!/usr/bin/env ruby
#
# This script connects to IB API and subscribes to market data for specific symbols
#

require 'bundler/setup'
require 'ib-ruby'
require_relative 'config_ib'

# Definition of what we want market data for.  We have to keep track of what ticker id
# corresponds to what symbol ourselves, because the ticks don't include any other
# identifying information. The choice of ticker ids is, as far as I can tell, arbitrary.
# (note: the forex symbols used here MUST be defined in lib/ib/symbols/forex.rb)
market = {123 => IB::Symbols::Forex.gbpusd  ,
          456 => IB::Symbols::Forex.eurusd ,
          789 => IB::Symbols::Forex.usdcad }

COUNT_OF_EVENTS =  20
counter = 0

ib = IB::Connection.new client_id: 1122, host: $host, port: $port do |gw|
	## Subcribe to forseable events before the connection is completed
	## Subscribe to TWS alerts/errors
	gw.subscribe(:Alert) { |msg| puts msg.to_human }
	gw.logger.level = Logger::FATAL

	# Subscribe to TickerPrice and TickerSize events.  The code passed in the block will
	# be executed when a message of that type is received, with the received message as its
	# argument. In this case, we just print out the tick. NB: The description field is not
	# from IB TWS. It is defined locally in forex.rb, and is just arbitrary text.

	gw.subscribe(:TickRequestParameters, :TickPrice, :TickSize,  :TickGeneric) do |msg|
		puts market[msg.ticker_id].description + ": " + msg.to_human
		counter = counter + 1
		if counter == COUNT_OF_EVENTS
			puts "\nCancelling market data subscription.."
			market.each_pair { |id, _| ib.send_message :CancelMarketData, id: id }
			puts "Generally, the TWS sends additional TickEvents after the subscription is cancelled ... \n\n"
			Thread.new do
				sleep 1
				puts "\n******** Press <Enter> to quit *********\n\n"
			end
		end
	end
end
# Now we actually request market data for the symbols we're interested in.
ib.send_message :RequestMarketDataType, market_data_type: :delayed
market.each_pair do |id, contract|
	ib.send_message :RequestMarketData, id: id, contract: contract
end

puts "\nSubscribed to market data"
puts "\n********* Receiving #{COUNT_OF_EVENTS} TickEvents, then canceling the subscription ***** \n\n"
STDIN.gets

#@market.each_pair { |id, _| ib.send_message :CancelMarketData, id: id }
