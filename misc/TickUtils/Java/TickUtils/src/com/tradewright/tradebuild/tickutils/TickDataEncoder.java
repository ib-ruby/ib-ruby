/* Copyright 2008 Richard L King
 *
 * This file is part of TradeBuild Tick Utilities Package.
 *
 * TradeBuild Tick Utilities Package is free software: you can redistribute it
 * and/or modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the License, 
 * or (at your option) any later version.
 *
 * TradeBuild Tick Utilities Package is distributed in the hope that it will 
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TradeBuild Tick Utilities Package.  If not, see 
 * <http://www.gnu.org/licenses/>.
 */

package com.tradewright.tradebuild.tickutils;

import java.util.Date;

/**
 * This interface is implemented by classes that provide the ability to encode tick data into encoded segments.
 */
public interface TickDataEncoder {
    
    /* ================================================================================
     * Constants
     * ================================================================================
     */
    
    /* ================================================================================
     * Interfaces
     * ================================================================================
     */
    
    /* ================================================================================
     * Classes
     * ================================================================================
     */
    
    /* ================================================================================
     * Methods
     * ================================================================================
     */
     
    /**
     * Encodes an ask tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     * @param size The tick size.
     */
    void encodeAsk( Date timestamp, double price, int size);

    /**
     * Encodes a bid tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     * @param size The tick size.
     */
     void encodeBid( Date timestamp, double price, int size);

    /**
     * Encodes a close tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     */
     void encodeClose( Date timestamp, double price);

    /**
     * Encodes a high tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     */
     void encodeHigh( Date timestamp, double price);

    /**
     * Encodes a low tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     */
     void encodeLow( Date timestamp, double price);

    /**
     * Encodes a market depth tick.
     * @param timestamp The tick's timestamp.
     * @param position The position in the Depth-of-Market table.
     * @param marketmaker The market maker's identifier.
     * @param operation The operation to be performed in the Depth-of-Market table.
     * @param side The side of the Depth-of-Market table affected.
     * @param price The tick price.
     * @param size The tick size.
     */
     void encodeMarketDepthData( Date timestamp, int position, String marketmaker, int operation, int side, double price, int size);

    /**
     * Encodes a market depth reset event.
     * @param timestamp The tick's timestamp.
     */
     void encodeMarketDepthReset( Date timestamp);

    /**
     * Encodes an open tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     */
     void encodeOpen( Date timestamp, double price);

    /**
     * Encodes an open interest tick.
     * @param timestamp The tick's timestamp.
     * @param size The tick size.
     */
     void encodeOpenInterest( Date timestamp, int size);

    /**
     * Encodes a trade tick.
     * @param timestamp The tick's timestamp.
     * @param price The tick price.
     * @param size The tick size.
     */
     void encodeTrade( Date timestamp, double price, int size);

    /**
     * Encodes a volume tick.
     * @param timestamp The tick's timestamp.
     * @param size The tick size.
     */
     void encodeVolume( Date timestamp, int size);

    /**
     * Returns the first price recorded in the data encoded by this encoder.
     * 
     * This value must be stored by the application in addition to the encoded data itself, 
     * because it has to be passed to the decoder to enable the data to be correctly decoded.
     * @return The first price recorded in the data encoded by this encoder.
     */
     double getBasePrice();

    /**
     * Returns the encoded data generated by this encoder.
     * @return The encoded data generated by this encoder.
     */
     byte[] getEncodedData();

    /**
     * Returns the length in bytes of the encoded data generated by this encoder.
     * @return The length in bytes of the encoded data generated by this encoder.
     */
     int getEncodedDataLength();

    /**
     * Returns a URN uniquely identifying the format of the encoded data.
     * 
     * This value must be stored by the application in addition to the encoded data itself, because it has to be 
     * passed to the decoder to enable the data to be correctly decoded.
     * 
     * Due to the length of this identifier, it may be desirable to design the application such that this value 
     * is not repeated for every stored segment of encoded data. This design may need to allow for individual segments
     * to be updated in the future by a later version of the encoding that uses a different format and hence supplies
     * a different identifier.
     * @return A URN uniquely identifying the format of the encoded data.
     */
     String getEncodingFormatIdentifier();

    /**
     * Returns the period start time supplied when instantiating this decoder using {@link com.tradewright.tradebuild.tickutils.TickUtils#getTickEncoder getTickEncoder}.
     * @return The period start time supplied when instantiating this decoder.
     */
     Date getPeriodStartTime();

    /**
     * Returns the minimum tick size supplied when instantiating this decoder using {@link com.tradewright.tradebuild.tickutils.TickUtils#getTickEncoder getTickEncoder}.
     * @return The minimum tick size for this encoder.
     */
     double getTickSize();
    
}
