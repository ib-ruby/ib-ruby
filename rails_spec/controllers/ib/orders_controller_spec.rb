require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Ib::OrdersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Ib::Order. As you add validations to Ib::Order, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:local_id => 23,
     :order_ref => 'Test',
     :client_id => 1111,
     :perm_id => 173276893,
     :parent_id => 0,
     :side => :buy,
     :tif => :good_till_cancelled,
     :order_type => :market_if_touched,
     :limit_price => 0.1,
     :quantity => 100,
     :open_close => :close,
     :oca_group => '',
     :oca_type => :reduce_no_block,
     :origin => :firm,
     :designated_location => "WHATEVER",
     :exempt_code => 123,
     :delta_neutral_order_type => :market,
     :transmit => false,
     :outside_rth => true,
     :what_if => true,
     :not_held => true}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Ib::OrdersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all orders as @orders" do
      order = Ib::Order.create! valid_attributes
      get :index, { :use_route => true}, valid_session
      assigns(:orders).should eq([order])
    end
  end

  describe "GET show" do
    it "assigns the requested order as @order" do
      order = Ib::Order.create! valid_attributes
      get :show, {:id => order.to_param, :use_route => true}, valid_session
      assigns(:order).should eq(order)
    end
  end

  describe "GET new" do
    it "assigns a new order as @order" do
      get :new, { :use_route => true}, valid_session
      assigns(:order).should be_a_new(Ib::Order)
    end
  end

  describe "GET edit" do
    it "assigns the requested order as @order" do
      order = Ib::Order.create! valid_attributes
      get :edit, {:id => order.to_param, :use_route => true}, valid_session
      assigns(:order).should eq(order)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Ib::Order" do
        expect {
          post :create, {:order => valid_attributes, :use_route => true}, valid_session
        }.to change(Ib::Order, :count).by(1)
      end

      it "assigns a newly created order as @order" do
        post :create, {:order => valid_attributes, :use_route => true}, valid_session
        assigns(:order).should be_a(Ib::Order)
        assigns(:order).should be_persisted
      end

      it "redirects to the created order" do
        post :create, {:order => valid_attributes, :use_route => true}, valid_session
        response.should redirect_to(Ib::Order.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved order as @order" do
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Order.any_instance.stub(:save).and_return(false)
        post :create, {:order => {}, :use_route => true}, valid_session
        assigns(:order).should be_a_new(Ib::Order)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Order.any_instance.stub(:save).and_return(false)
        post :create, {:order => {}, :use_route => true}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested order" do
        order = Ib::Order.create! valid_attributes
        # Assuming there are no other orders in the database, this
        # specifies that the Ib::Order created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Ib::Order.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => order.to_param, :order => {'these' => 'params'}, :use_route => true}, valid_session
      end

      it "assigns the requested order as @order" do
        order = Ib::Order.create! valid_attributes
        put :update, {:id => order.to_param, :order => valid_attributes, :use_route => true}, valid_session
        assigns(:order).should eq(order)
      end

      it "redirects to the order" do
        order = Ib::Order.create! valid_attributes
        put :update, {:id => order.to_param, :order => valid_attributes, :use_route => true}, valid_session
        response.should redirect_to(order)
      end
    end

    describe "with invalid params" do
      it "assigns the order as @order" do
        order = Ib::Order.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Order.any_instance.stub(:save).and_return(false)
        put :update, {:id => order.to_param, :order => {}, :use_route => true}, valid_session
        assigns(:order).should eq(order)
      end

      it "re-renders the 'edit' template" do
        order = Ib::Order.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Order.any_instance.stub(:save).and_return(false)
        put :update, {:id => order.to_param, :order => {}, :use_route => true}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested order" do
      order = Ib::Order.create! valid_attributes
      expect {
        delete :destroy, {:id => order.to_param, :use_route => true}, valid_session
      }.to change(Ib::Order, :count).by(-1)
    end

    it "redirects to the orders list" do
      pending 'Something is wrong with RSpecs redirect_to matcher'
      order = Ib::Order.create! valid_attributes
      delete :destroy, {:id => order.to_param, :use_route => true}, valid_session
      response.should redirect_to(orders_url)
    end
  end

end
