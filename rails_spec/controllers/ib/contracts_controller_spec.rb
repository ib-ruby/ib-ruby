require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Ib::ContractsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Ib::Contract. As you add validations to Ib::Contract, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:symbol => 'AAPL',
     :sec_type => 'OPT',
     :expiry => '201301',
     :strike => 600.5,
     :right => :put,
     :sec_id => 'US0378331005',
     :sec_id_type => 'ISIN',
     :multiplier => 10,
     :exchange => 'SMART',
     :currency => 'USD',
     :local_symbol => 'AAPL  130119C00500000'}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Ib::ContractsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all contracts as @contracts" do
      contract = Ib::Contract.create! valid_attributes
      get :index, { :use_route => true}, valid_session
      assigns(:contracts).should eq([contract])
    end
  end

  describe "GET show" do
    it "assigns the requested contract as @contract" do
      contract = Ib::Contract.create! valid_attributes
      get :show, {:id => contract.to_param, :use_route => true}, valid_session
      assigns(:contract).should eq(contract)
    end
  end

  describe "GET new" do
    it "assigns a new contract as @contract" do
      get :new, { :use_route => true}, valid_session
      assigns(:contract).should be_a_new(Ib::Contract)
    end
  end

  describe "GET edit" do
    it "assigns the requested contract as @contract" do
      contract = Ib::Contract.create! valid_attributes
      get :edit, {:id => contract.to_param, :use_route => true}, valid_session
      assigns(:contract).should eq(contract)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Ib::Contract" do
        expect {
          post :create, {:contract => valid_attributes, :use_route => true}, valid_session
        }.to change(Ib::Contract, :count).by(1)
      end

      it "assigns a newly created contract as @contract" do
        post :create, {:contract => valid_attributes, :use_route => true}, valid_session
        assigns(:contract).should be_a(Ib::Contract)
        assigns(:contract).should be_persisted
      end

      it "redirects to the created contract" do
        post :create, {:contract => valid_attributes, :use_route => true}, valid_session
        response.should redirect_to(Ib::Contract.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved contract as @contract" do
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Contract.any_instance.stub(:save).and_return(false)
        post :create, {:contract => {}, :use_route => true}, valid_session
        assigns(:contract).should be_a_new(Ib::Contract)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Contract.any_instance.stub(:save).and_return(false)
        post :create, {:contract => {}, :use_route => true}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested contract" do
        contract = Ib::Contract.create! valid_attributes
        # Assuming there are no other contracts in the database, this
        # specifies that the Ib::Contract created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Ib::Contract.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => contract.to_param, :contract => {'these' => 'params'}, :use_route => true}, valid_session
      end

      it "assigns the requested contract as @contract" do
        contract = Ib::Contract.create! valid_attributes
        put :update, {:id => contract.to_param, :contract => valid_attributes, :use_route => true}, valid_session
        assigns(:contract).should eq(contract)
      end

      it "redirects to the contract" do
        contract = Ib::Contract.create! valid_attributes
        put :update, {:id => contract.to_param, :contract => valid_attributes, :use_route => true}, valid_session
        response.should redirect_to(contract)
      end
    end

    describe "with invalid params" do
      it "assigns the contract as @contract" do
        contract = Ib::Contract.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Contract.any_instance.stub(:save).and_return(false)
        put :update, {:id => contract.to_param, :contract => {}, :use_route => true}, valid_session
        assigns(:contract).should eq(contract)
      end

      it "re-renders the 'edit' template" do
        contract = Ib::Contract.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Ib::Contract.any_instance.stub(:save).and_return(false)
        put :update, {:id => contract.to_param, :contract => {}, :use_route => true}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested contract" do
      contract = Ib::Contract.create! valid_attributes
      expect {
        delete :destroy, {:id => contract.to_param, :use_route => true}, valid_session
      }.to change(Ib::Contract, :count).by(-1)
    end

    it "redirects to the contracts list" do
      pending 'Something is wrong with RSpecs redirect_to matcher'
      contract = Ib::Contract.create! valid_attributes
      delete :destroy, {:id => contract.to_param, :use_route => true}, valid_session
      response.should redirect_to(contracts_url)
    end
  end

end
